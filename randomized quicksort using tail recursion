import time
import threading
import math
import random

FRAME=0


def partition(A,low,high):
	pivot = A[low]
	i = low + 1
	j = high
	while(i <= j ):
		while i <= j and A[i] < pivot:
			i = i + 1
		while i <= j and A[j] >= pivot:
			j = j - 1
		if(i < j):
			A[i] , A[j] = A[j] , A[i]
	A[j] , A[low] = A[low] , A[j]
	return j


def Randomized_Partition(A,low,high):

	i = random.randint(low,high)
	A[low] , A[i] = A[i] , A[low]
	q = partition(A,low,high)
	return q
	



def quicksort(A,low,high):
	global FRAME
	FRAME = FRAME + 1
	if(low < high):
		q = Randomized_Partition(A,low,high)
		quicksort(A,low,q-1)
		quicksort(A,q+1,high)
		'''if(q-low < high-q):
			quicksort(A, low, q-1)
			low = q+1
		else:
			quicksort(A,q+1,high)
			high = q-1'''



def main():
	array=[]
	with open('Dataset2-sorted.txt') as f:
		data = f.read()
	array= list(map(int,data.split(',')))
	high = len(array) - 1
	divider=Randomized_Partition(array,0,50)


	t1=threading.Thread(target=quicksort,args=(array,0,divider-1))
	t2=threading.Thread(target=quicksort,args=(array,divider+1,50))

	t1.start()
	t2.start()
	print("Started threads")

	t1.join()
	t2.join()

	end_time=time.time()

	print(f"Printing first 200 elements of Sorted array:{array[0:200]}") 
	
	print(f"Time taken to execute:{start_time-end_time}")
	print(f"Total Frames:{FRAME}")


	

if __name__ == "__main__":
	start_time=time.time()
	main()
//








import time
import threading
import math

FRAME=0


def partition(A,low,high):
	'''middle = (low + high)/2             # For selecting middle value as pivot
	mi = math.floor(middle)
	A[mi] , A[low] = A[low] , A[mi]'''
	pivot = A[low]
	i = low + 1
	j = high
	while(i <= j ):
		while i <= j and A[i] < pivot:
			i = i + 1
		while i <= j and A[j] >= pivot:
			j = j - 1
		if(i < j):
			A[i] , A[j] = A[j] , A[i]
	A[j] , A[low] = A[low] , A[j]
	return j

		

def quicksort(A,low,high):
	global FRAME
	FRAME = FRAME + 1
	while(low < high):
		q = partition(A,low,high)
		if(q-low < high-q):
			quicksort(A, low, q-1)
			low = q+1
		else:
			quicksort(A,q+1,high)
			high = q-1



def main():
	array=[]
	with open('Dataset1.txt') as f:
		data = f.read()
	array= list(map(int,data.split(',')))
	high = len(array) - 1
	divider=partition(array,0,high)

	'''This block if you want to use 4 threads;
	d1 = partition(array,0,divider-1)
	d2 = partition(array,divider+1,high)

	t1 = threading.Thread(target=quicksort,args=(array,0,d1-1))
	t2 = threading.Thread(target=quicksort,args=(array,d1+1,divider-1))
	t3 = threading.Thread(target=quicksort,args=(array,divider+1,d2-1))
	t4 = threading.Thread(target=quicksort,args=(array,d2+1,high))'''

	t1=threading.Thread(target=quicksort,args=(array,0,divider-1))
	t2=threading.Thread(target=quicksort,args=(array,divider+1,high))

	t1.start()
	t2.start()
	#t3.start()
	#t4.start()

	t1.join()
	t2.join()
	#t3.join()
	#t4.join()
	end_time=time.time()
	

	print(f"Printing first 200 elements of Sorted array:{array[0:200]}") 
	
	print(f"Time taken to execute:{start_time-end_time}")
	print(f"Total Frames:{FRAME}")


	

if __name__ == "__main__":
	start_time=time.time()
	main()
//











import random
import time
import math

COUNTER = 0
FRAME=0
start_time = 0.0
Execution_Cycle = 0

def lumito_partition(A,low,high):
	global COUNTER
	pivot = A[high]
	i = low - 1
	for j in range(low,high):
		if A[j] <= pivot:
			i = i + 1
			A[i] , A[j] = A[j] , A[i]
			COUNTER = COUNTER + 1
	A[i+1] , A[high] = A[high] ,A[i+1]
	COUNTER = COUNTER + 1
	return i + 1

def partition(A,low,high,pi):
	global COUNTER 

	if pi == 1:
		pivot = A[low]
	elif pi == 2:
		middle = (low + high)/2
		mi = math.floor(middle)
		A[mi] , A[low] = A[low] , A[mi]
		pivot = A[low]

	i = low + 1
	j = high
	while(i <= j ):
		while i <= j and A[i] < pivot:
			i = i + 1
		while i <= j and A[j] >= pivot:
			j = j - 1
		if(i < j):
			A[i] , A[j] = A[j] , A[i]
			COUNTER = COUNTER + 1

	A[j] , A[low] = A[low] , A[j]
	COUNTER = COUNTER + 1
	return j



def quicksort(A,low,high,pi):
	global FRAME
	FRAME = FRAME + 1
	if(low<high):
		if(pi==1):
			q=partition(A,low,high,1)
		elif(pi==2):
			q=partition(A,low,high,2)
		elif(pi==3):
			q=lumito_partition(A,low,high)
		quicksort(A,low,q-1,pi)
		quicksort(A,q+1,high,pi)

		



def main():

	global start_time
	global Execution_Cycle
	global COUNTER
	global FRAME


	while(True):
		Execution_Cycle = Execution_Cycle + 1
		if(Execution_Cycle>1):
			COUNTER=0
			FRAME=0
		print("Select from from numbers 1 to 3:\n 1. Hoare Partition with left most element as pivot \n 2. Hoare Partition with middle element as pivot")
		print(" 3. Lumito Partition\n")
		Choice = input("Enter choice:")

		array=[]
		start_time=time.time()
		with open('Dataset1.txt') as f:    # You can change the testfile here to perform test on other datasets
			data = f.read()
		array= list(map(int,data.split(',')))	
		high = len(array) - 1

		if Choice == "1":
			quicksort(array,0,high,1)

		elif Choice == "2":
			quicksort(array,0,high,2)

		elif Choice == "3":
			quicksort(array,0,high,3)

		else:
			break

		end_time=time.time()
		print(f"First 100 elements of sorted array is:{array[0:100]}\n")    # You can comment this out if you dont want to print whole array or add range in array to print part of the array: array[0,100]
		
		print(f"Time taken to execute:{start_time-end_time}")
		print(f"Total swaps:{COUNTER}")
		print(f"Total Recursive calls:{FRAME}\n")




if __name__ == "__main__":
	main()
  //
  
  
  
  
  
  
  
  
  
  
  
  
  import time
import math

COUNTER = 0				#To calculate total swaps performed by partition method
FRAME=0					#To calculate total recursive calls 
start_time = 0.0		
Execution_Cycle = 0		#To reset the FRAME & COUNTER variable after each sort execution

def lumito_partition(A,low,high):
	global COUNTER
	pivot = A[high]
	i = low - 1
	for j in range(low,high):
		if A[j] <= pivot:
			i = i + 1
			A[i] , A[j] = A[j] , A[i]
			COUNTER = COUNTER + 1
	A[i+1] , A[high] = A[high] ,A[i+1]
	COUNTER = COUNTER + 1
	return i + 1

def partition(A,low,high,pi):
	global COUNTER

	if pi == 1:
		pivot = A[low]
	elif pi == 2: 
		middle = (low + high)/2
		mi = math.floor(middle)
		A[mi] , A[low] = A[low] , A[mi]
		pivot = A[low]

	i = low + 1
	j = high
	while(i <= j ):
		while i <= j and A[i] < pivot:
			i = i + 1
		while i <= j and A[j] >= pivot:
			j = j - 1
		if(i < j):
			A[i] , A[j] = A[j] , A[i]
			COUNTER = COUNTER + 1

	A[j] , A[low] = A[low] , A[j]
	COUNTER = COUNTER + 1
	return j

		

def quicksort(A,low,high,pi):
	global FRAME
	FRAME=FRAME+1
	
	while(low<high):
		if(pi==1):
			q=partition(A,low,high,1)
		elif(pi==2):
			q=partition(A,low,high,2)
		elif(pi==3):
			q=lumito_partition(A,low,high)

		if(q-low < high-q):
			quicksort(A, low, q-1,pi)
			low = q+1
		else:
			quicksort(A,q+1,high,pi)
			high = q-1



def main():
	global start_time
	global Execution_Cycle
	global COUNTER
	global FRAME

	

	while(True):
		Execution_Cycle = Execution_Cycle + 1
		if(Execution_Cycle > 1):
			COUNTER=0
			FRAME=0

		print("Select from from numbers 1 to 3:\n 1. Hoare Partition with left most element as pivot \n 2. Hoare Partition with middle element as pivot")
		print(" 3. Lumito Partition\n")
		Choice = input("Enter choice:")

		array=[]
		start_time=time.time()
		with open('Dataset1.txt') as f:
			data = f.read()
		array= list(map(int,data.split(',')))
		high = len(array) - 1

		if Choice == "1":
			quicksort(array,0,high,1)

		elif Choice == "2":
			quicksort(array,0,high,2)

		elif Choice == "3":
			quicksort(array,0,high,3)
		else:
			break

		end_time=time.time()

		print(f"First 100 elements of sorted array is:{array[0:100]}\n")
		
		print(f"Time taken to execute:{start_time-end_time}")
		print(f"Total swaps:{COUNTER}")
		print(f"Total Recursive calls:{FRAME}\n")
	

if __name__ == "__main__":
	main()
//











import random
import time

COUNTER = 0
FRAME = 0
start_time = 0.0
Execution_Cycle = 0

def lumito_partition(A,low,high):
	global COUNTER
	pivot = A[high]
	i = low - 1
	for j in range(low,high):
		if A[j] <= pivot:
			i = i + 1
			A[i] , A[j] = A[j] , A[i]
			COUNTER = COUNTER + 1

	A[i+1] , A[high] = A[high] ,A[i+1]
	COUNTER = COUNTER + 1
	return i + 1

def partition(A,low,high):
	global COUNTER
	pivot = A[low]
	i = low+1
	j = high

	while(i <= j ):
		while i <= j and A[i] < pivot:
			i = i + 1
		while i <= j and A[j] >= pivot:
			j = j - 1
		if(i < j):
			A[i] , A[j] = A[j] , A[i]
			COUNTER = COUNTER + 1

	A[j] , A[low] = A[low] , A[j]
	COUNTER = COUNTER + 1
	return j

def Randomized_Partition(A,low,high,c):
	i = random.randint(low,high)
	A[low] , A[i] = A[i] , A[low]

	if(c == 1):
		q = partition(A,low,high)

	elif(c == 2):
		q = lumito_partition(A,low,high)
	return q


def quicksort(A,low,high,c):
	global FRAME
	FRAME=FRAME+1

	if(low<high):
		q = Randomized_Partition(A,low,high,c)
		quicksort(A,low,q-1,c)
		quicksort(A,q+1,high,c)
		



def main():
	global start_time
	global Execution_Cycle
	global COUNTER
	global FRAME
	
	

	while(True):
		Execution_Cycle = Execution_Cycle + 1
		if(Execution_Cycle > 1):
			COUNTER=0
			FRAME=0

		print("Select Partition Method:\n 1. Hoare Partition\n 2. Lumito Partition")
		Choice = input("Enter choice:")

		array=[]
		start_time=time.time()
		with open('Dataset2-sorted.txt') as f:
			data = f.read()
		array= list(map(int,data.split(',')))
		high = len(array) - 1

		if(Choice == "1"):
			quicksort(array,0,high,1)
		elif(Choice == "2"):
			quicksort(array,0,high,2)
		else:
			break

		end_time=time.time()
		print(f"First 200 elements of sorted array:{array[0:200]}\n")
		
		print(f"Time taken to execute:{start_time-end_time}")
		print(f"Total swaps:{COUNTER}")
		print(f"Total Recursive calls:{FRAME}\n")


if __name__ == "__main__":
	main()
  //
  
  
  
  
  
  
  
